"#!/bin/sh

#PBS -N #{label}
#PBS -m bea
#PBS -M #{email}
#PBS -o #{working_dir}/#{label}.out
#PBS -e #{working_dir}/#{label}.err
#PBS -l walltime=72:00:00

if [ ! -d #{working_dir} ]; then
    mkdir #{working_dir} 
    mkdir #{working_dir}/rds
fi
cd #{working_dir}
echo '*****************************************************'
echo writing output to:
echo #{working_dir}
echo '*****************************************************'
echo 

if [ ! -r #{working_dir}/#{export_file} ]; then
  echo #{working_dir}/#{export_file}: no such file or unreadable
  exit 1
fi


# config:
bowtie_exe=#{rnaseq_dir}/bowtie/bowtie
erange_dir=#{rnaseq_dir}/commoncode

post_slimseq=#{script_dir}/post_to_slimseq.pl # needs pp_id and status

########################################################################
## translate export.txt file to fasta format

export2fasta=/tools/bin/fq_all2std.pl
cmd=\"perl $export2fasta export2std #{working_dir}/#{export_file}\"
echo \"translation cmd: $cmd\"
if [ #{pp_id} ]; then
  perl $post_slimseq -type post_pipelines -id #{pp_id} -field status -value 'extracting reads from ELAND file'
fi

# unlink converted export file if it exists (so that redirection, below, won't fail)
if [ -r #{working_dir}/#{export_file}.#{format} ]; then
  unlink #{working_dir}/#{export_file}.#{format}	
fi

#{launch} $cmd > #{working_dir}/#{export_file}.#{format}
echo status is $?

#if [ $? ]; then
#  echo error running $cmd \($?\)
#  exit $?
#fi

# this writes #{working_dir}/#{export_file}.#{format}

########################################################################
## bowtie-cmd.sh:
## Note: bowtie needs .ewbt files to work from; don't exist yet for critters other than mouse

# reads_file is the input
repeats=#{reads_file}.repeats.#{format}
unmapped=#{reads_file}.unmapped.#{format}


export BOWTIE_INDEXES=\"#{genomes_dir}/#{org_name}\"

cmd=\"$bowtie_exe #{ref_genome} #{bowtie_opts} #{reads_file} --unfa $unmapped --maxfa $repeats #{bowtie_output}\"
echo \"alignment cmd: $cmd\"
if [ #{pp_id} ]; then
  perl $post_slimseq -type post_pipelines -id #{pp_id} -field status -value 'aligning reads (bowtie)'
fi
#{launch} $cmd
echo status is $?

echo #{bowtie_output} written
echo

#check
########################################################################
## makeRdsFromBowtie-cmd.sh:

# due to an apparent bug in makerdsfrombowtie.py, we need to rm rds_output
# if it exists.  The bug (actually in commoncode.py) is that it uses the 
# sql 'create table if not exists <tablename>', without dropping the table/db
# first.  The effect is that the tables get appended to, not re-written.

python=/tools/bin/python
script=$erange_dir/makerdsfrombowtie.py

if [ -r #{rds_output} ]; then
  rm #{rds_output}
fi

cmd=\"$python $script #{label} #{bowtie_output} #{rds_output} #{rds_args}\"
echo \"rds cmd: $cmd\"

echo #{rds_output} written
echo
if [ #{pp_id} ]; then
  perl $post_slimseq -type post_pipelines -id #{pp_id} -field status -value 'Creating RDS files from alignment'
fi
#{launch} $cmd
echo status is $?

########################################################################
## runStandardAnalysisNFS-cmd.sh:

echo erange cmd: $erange_dir/runStandardAnalysisNFS.sh #{org_name} #{rds_dir}/#{export_file} #{jdrf_dir}/genomes/#{org_name}/repeats_mask.db 5000
if [ #{pp_id} ]; then
  perl $post_slimseq -type post_pipelines -id #{pp_id} -field status -value 'running ELAND'
fi
#{launch} time sh $erange_dir/runStandardAnalysisNFS.sh #{org_name} #{rds_dir}/#{export_file} #{jdrf_dir}/genomes/#{org_name}/repeats_mask.db 5000
echo status is $?

########################################################################
# gather stats:

echo gathering stats...
stats_file=#{working_dir}/#{export_file}.stats
if [ #{pp_id} ]; then
  perl $post_slimseq -type post_pipelines -id #{pp_id} -field status -value 'generating stats'
  perl $post_slimseq -type post_pipelines -id #{pp_id} -field stats_file -value '$stats_file'
fi

gather_stats=#{script_dir}/gather_stats.pl
    cmd=\"$perl $gather_stats -working_dir #{working_dir} -export #{export_file} -job_name #{label}\"
#{launch} $cmd



# ERCC section copied from ~vcassen/software/Solexa/RNA-seq/ERCC/ercc_pipeline.qsub
if [ #{erccs} ]; then
########################################################################
# count ERCC alignments, utilizing original counts:
  bowtie2count=#{script_dir}/bowtie2count.ercc.pl
  ercc_counts=#{working_dir}/#{export_file}.ercc.counts # output 

  if [ ! -r #{bowtie_output} ]; then
    echo #{bowtie_output} unreadable
    exit 1
  fi

  cmd=\"$perl $bowtie2count #{bowtie_output} > $ercc_counts\"
  echo $cmd
  #{launch} $cmd
  echo status is $?
  echo $ercc_counts written 

########################################################################
# get total aligned reads by reading the file ${bowtie_output}.total_aligned_reads.
# This file is generated by bowtie2count in the previous step
  tarf=\"${bowtie_output}.total_aligned_reads\"
  if [ ! -r $tarf ]; then
    echo $tarf unreadable
#    exit 1
  else
    total_aligned_reads=`cat $tarf | cut -f2 -d: `
  fi
  if [ -z $total_aligned_reads -o $total_aligned_reads -eq 0 ]; then
    echo Unable to get valid read from $tarf
    exit 1
  fi

  echo total_aligned_reads: $total_aligned_reads

########################################################################
# normalize read counts:
  normalize_erccs=#{script_dir}/normalize_erccs.pl
  cmd=\"$perl $normalize_erccs -bowtie_output #{bowtie_output} -total_aligned_reads $total_aligned_reads -force\"
  # writes to #{bowtie_output}.normalized (sorta; removes old suffix first, ie, 'out'->'normalized').
  echo $cmd
  #{launch} $cmd
  echo status is $?

fi				# end ERCC section

########################################################################
## Stats2:

final_rpkm_file=#{rds_dir}/#{export_file}.final.rpkm
n_genes=`wc -l $final_rpkm_file | cut -f1 -d\  `

stats=<<EOF
#
total aligned reads: $aligned_reads
number of genes observed: $n_genes
EOF



# update slimseq with stats file and status:
if [ #{pp_id} ]; then
  perl $post_slimseq -type post_pipelines -id #{pp_id} -field status -value 'Finished'
fi

"
